Scale up and down + Highly Avaiable Application

the platform need to orchestrate the connectivity between the container and automatic scale up
+ Docker Swarm 
+ Kubernetes -> Focus
+ Mesos
 
Kubernetes Architecture
Node is a machine, physical or virtual, on which Kubernetes is installed
-> WORKER MACHINE -> where container will be launched by Kubernetes

Cluster is a set of nodes grouped together, 1 node fails -> app still working
moreover, sharing load at well

Master is another node with Kubernetes installed in it and configured as a master
Master watches over the nodes in the cluster and is reponsible for actual orchestration of container on nodes


Kubernetes components
 1. API Server : front end for Kubernetes. Users manage devices, command line through API server with the cluster
 2. etcd: Key-value store to store all data used to manage the cluster
 3. kubelet: agent that run on each node make sure the containes are running on the node as expected
 4. Container Runtime: basic software is used to run container -> happen to be docker
 5. Controller: notice and respond when nodes, containers, endpoint down -> create a new one instead
 6. Scheduler: is reponsible for distributing containers across multiple nodes: create new container and assigns them to nodes
 
 Master                            Node
 1. kube-apiserver<-------------> 1. kubelet
 2. etcd                          2. Container Runtime
 3. controller
 4. scheduler
 
-------------------------------------------------------------------
kubectl command : Deploy and manage app on the cluster
-------------------------------------------------------------------
kubectl run hello-minikube : deploy app
kubectl cluster-info : inspect information of cluster, query etcd info
kubectl get nodes : list all node on cluster

minikube is local kubernetes for Dev
 Master & Node
 1. kube-apiserver
 2. kubelet
 3. etcd   
 4. Container Runtime
 5. controller
 6. scheduler

-----------------------------------------------------------------------
Install and set up the kubectl tool
------------------------------------------------------------------------

https://kubernetes.io/docs/tasks/tools/

kubectl allows you to run commands against Kubernetes clusters
https://kubernetes.io/releases/download/#binaries
v1.31.0	windows	386


Install Minikube: 
https://minikube.sigs.k8s.io/docs/start/


$oldPath = [Environment]::GetEnvironmentVariable('Path', [EnvironmentVariableTarget]::Machine)
if ($oldPath.Split(';') -inotcontains 'D:\Program Files\Kubernetes\Minikube'){
  [Environment]::SetEnvironmentVariable('Path', $('{0};D:\Program Files\Kubernetes\Minikube' -f $oldPath), [EnvironmentVariableTarget]::Machine)
}



Install VirtualBox: –
https://www.virtualbox.org/wiki/Downloads
https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170

https://www.virtualbox.org/wiki/Linux_Downloads



https://kubernetes.io/docs/tutorials/hello-minikube/

If the minikube installation has been done on the macOS, then to access the URL on the local browser, we need to do a few steps to get the service URL to work. Those steps are covered on this documentation page: –

https://minikube.sigs.k8s.io/docs/handbook/accessing/#using-minikube-service-with-tunnel 
 
 
C:\Program Files\Kubernetes\Minikube 
■ minikube update-context
■ minikube.exe start --driver=virtualbox 
D:\Program Files\Kubernetes\Minikube>minikube start --driver=virtualbox
* minikube v1.34.0 on Microsoft Windows 11 Home 10.0.22631.4037 Build 22631.4037
* Using the virtualbox driver based on user configuration
* Downloading VM boot image ...
    > minikube-v1.34.0-amd64.iso....:  65 B / 65 B [---------] 100.00% ? p/s 0s
    > minikube-v1.34.0-amd64.iso:  333.55 MiB / 333.55 MiB  100.00% 5.74 MiB p/
* Starting "minikube" primary control-plane node in "minikube" cluster
* Downloading Kubernetes v1.31.0 preload ...
    > preloaded-images-k8s-v18-v1...:  326.69 MiB / 326.69 MiB  100.00% 4.77 Mi
* Creating virtualbox VM (CPUs=2, Memory=4000MB, Disk=20000MB) ...
! Failing to connect to https://registry.k8s.io/ from inside the minikube VM
* To pull new external images, you may need to configure a proxy: https://minikube.sigs.k8s.io/docs/reference/networking/proxy/
* Preparing Kubernetes v1.31.0 on Docker 27.2.0 ...
  - Generating certificates and keys ...
  - Booting up control plane ...
  - Configuring RBAC rules ...
* Configuring bridge CNI (Container Networking Interface) ...
  - Using image gcr.io/k8s-minikube/storage-provisioner:v5
* Verifying Kubernetes components...
* Enabled addons: storage-provisioner, default-storageclass
* Done! kubectl is now configured to use "minikube" cluster and "default" namespace by default

■ minikube.exe status

2CPU and 4GB RAM VitualBox VM created

kubectl get nodes
create deployment
■ kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.10
■ kubectl get deployment
■ kubectl expose deployment hello-minikube --type=NodePort --port=8080

create service
■ minikube service hello-minikube --url 
http://192.168.59.100:30928

delete service
■ minikube delete service hello-minikube

■ kubectl delete deployment hello-minikube

■ kubectl get pod

■ kubectl get svc


---------------------
PODS
-----------------------

Kubernetes encapsulate application into PODS instance
many people access your app -> Scale up -> create new container in difference pod
2 containers <> 2 Pods in the same node
1 container in 1 pod in other node , pod 1 in 1 relationship with container
multiple containers PODS: when you want to add other container with difference app -> 2 container can be connect 

■ kubectl run nginx --image=nginx
-> same docker run nginx 


■ kubectl get pod 
-> docker ps

■ kubectl describe pod ngix

■ kubectl get pods -o wide

■ kubectl create deployment nginx --image=nginx

--------------------------------------------
YAML
--------------------------------------------

Like JSON, XML -> store data in file

Servers:
    -   name: Server1
	    owner: Jon
		status: active
Key-value pair
name: Server1


List of dictionaries
Fruits:
	-	Banana:
			Calories: 105
			Fat: 0.4 g
	-	Grape:
			Calories: 62
			Fat: 0.3 g

Note: 
dictionary - Unordered
Banana:                  Banana:
	Calories: 105    =       Fat: 0.4 g
	Fat: 0.4 g               Calories: 105
Array/List - Ordered
Fruits:               Fruits:
-	Orange     <>     -	  Apple
-	Apple	          -   Orange


Download IDE https://code.visualstudio.com/ for edit yaml file
Add extention YAML of redhat

"yaml.schemas": {

	"kubernetes": "*.yaml"
},
"redhat.telemetry.enabled": true

pod-definition.yml
apiVersion: v1        -> (*)
kind:
metadata:             -> Identify object
	name: myapp-pod
	labels:
		app: myapp
spec:
	containers:
	  - name: nginx-container
		image: nginx

(*) kind       apiVersion
    Pod           v1
    Service       v1
	ReplicaSet    apps/v1
	Deployment    apps/v1

■ kubectl create -f pod-definition.yml
■ kubectl describe pod <pod name>
 kubectl apply -f pod.yaml


Run the command kubectl describe pod newpods-<id> and look at the node field.
Alternatively run kubectl get pods -o wide and check for the node the pod is placed on.
■ kubectl get pod newpods-l7mz5 newpods-2q9nm newpods-hgzc2 -o wide


■ kubectl delete pod webapp


Update the pod-definition file and use ■ kubectl apply command or use ■ kubectl edit pod redis command.


