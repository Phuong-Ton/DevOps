Script > needCoding skill

Ansible: Simple and Powerful.
bash -> Ansible Playbook
Ansible Document
automation setting



1. Using VitualBox for lab
2. Create a template first base on Centos
3. Ansible Control Machine
   Ansible Target Machine

Download VitualBox -> https://www.osboxes.org/
https://www.osboxes.org/virtualbox-images/
https://www.osboxes.org/centos/


clone image from template, make sure check init Macaddress-> log in and find ifconfig



/etc/hostname
ansible-controller
/etc/hosts
127.0.0.1 ansible-controller
restart


■ sudo yum install ansible
■ ansible --version
Check network between controller -> target
create file inventory.txt
target1 ansible_host=192.168.1.114 ansible_ssh_pass=osboxes.org

■ ssh 192.168.1.114 manual hit to create host key ssh 
config /etc/ansible/ansible.cfg
#host_key_checking = False

■ ansible target1 -m ping -i inventory.txt
ping-pong is ok

-----------------------------------
Ansible Inventory default /etc/ansible/hosts

Ansible : agentless on target system

1. alias host 
ansible_host=IP
ansible_host=DCS00001@d0001.com

2. connection type (Window or Linux)
ansible_connection=ssh
ansible_connection=winrm

3. port access
ansible_port=22
ansible_port=5986   ??? 3389

4.user
ansible_user

5.pass
ansible_ssh_pass
ansible_password for window


student-node :- This host will act as an Ansible master node where you will create playbooks, inventory, roles etc and you will be running your playbooks from this host itself.


node01 :- This host will act as an Ansible client/remote host where you will setup/install some stuff using Ansible playbooks. Below are the SSH credentials for this host:
User: bob
Password: caleston123


node02 :- This host will also act as an Ansible client/remote host where you will setup/install some stuff using Ansible playbooks. Below are the SSH credentials for this host:
User: bob
Password: caleston123


Note: Please type exit or logout on the terminal or press CTRL + d to log out from a specific node.



[all_servers:children]
web_servers
db_servers

[bob@student-node playbooks]$ cat inventory 
# Sample Inventory File

# Web Servers
web1 ansible_host=server1.company.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Password123!
web2 ansible_host=server2.company.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Password123!
web3 ansible_host=server3.company.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Password123!

# Database Servers
db1 ansible_host=server4.company.com ansible_connection=winrm ansible_user=administrator ansible_password=Password123!


[web_servers]
web1
web2
web3

[db_servers]
db1

[all_server:children]
web_servers
db_servers

-------------------------------------------------------------------
| Server Alias |  Server Name  |  OS    |     User      | Password |
-------------------------------------------------------------------
| sql_db1      | sql01.xyz.com | Linux  |     root      | Lin$Pass |
-------------------------------------------------------------------
| sql_db2      | sql02.xyz.com | Linux  |     root      | Lin$Pass |
-------------------------------------------------------------------
| web_node1    | web01.xyz.com | Win    | administrator | Win$Pass |
-------------------------------------------------------------------
| web_node2    | web02.xyz.com | Win    | administrator | Win$Pass |
-------------------------------------------------------------------
| web_node3    | web03.xyz.com | Win    | administrator | Win$Pass |


--------------------------------------------------------
|    Group         |  Members                          |
--------------------------------------------------------
|    db_nodes      |  sql_db1, sql_db2                 |
--------------------------------------------------------
|   web_nodes      |  web_node1, web_node2, web_node3  |
--------------------------------------------------------
|    boston_nodes  |  sql_db1, web_node1               |
--------------------------------------------------------
|    dallas_nodes  |  sql_db2, web_node2, web_node3    |
--------------------------------------------------------
|   us_nodes       |  boston_nodes, dallas_nodes       |
--------------------------------------------------------

# Groups
[db_nodes]
sql_db1
sql_db2

[web_nodes]
web_node1
web_node2
web_node3

[boston_nodes]
sql_db1
web_node1

[dallas_nodes]
sql_db2
web_node2
web_node3

[us_nodes:children]
boston_nodes
dallas_nodes

■ ansible-playbook playbooks.yml
■ ansible-playbook update_service.yml --check


ansible-playbook configure_database.yml --check --diff 

To check the configure_database.yml playbook for syntax errors
ansible-playbook --syntax-check configure_database.yml

 ensure that it adheres to best practices and doesn't have any style-related issues
ansible-lint database_setup.yml

After running ansible-lint on the playbook, the following issues might be seen.
A. Incorrect indentation.
C. Missing name attribute for a task.



Ignoring the feedback and proceeding with playbook execution is definitely not a recommended action.



cd /home/bob/playbooks
ansible-playbook -i inventory playbook.yaml

---
- name: 'Execute a command to display hosts file on localhost'
  hosts: localhost
  become: yes
  tasks:
     - name: 'Task to display hosts file'
       command: 'cat /etc/hosts'
	   
	   
---
- name: 'Execute two commands on localhost'
  hosts: localhost
  become: yes
  tasks:
     - name: 'Execute a date command'
       command: date
     - name: 'Task to display nameservers'
       command: 'cat /etc/resolv.conf'
	   
---
- name: 'Execute two commands on node01'
  hosts: node01
  become: yes
  tasks:
    - name: 'Execute a date command'
      command: date
    - name: 'Task to display hosts file on node01'
      command: 'cat /etc/hosts'
- name: 'Execute a command on node02'
  hosts: node02
  become: yes
  tasks:
     - name: 'Task to display hosts file on node02'
       command: 'cat /etc/hosts'
	   

---------------------------------
Ansible Module
---------------------------------
System - User, Group, Hostname, Iptable, Lvg, Make, Mount, Ping, Timezone, Systemd, Service
Commands - Command, Expect, Script, Shell
Files - Acl, archive, Copy, File, Find, 
Database - Mongodb, 
Cloud - Amazon, Aure, Docker, Google, VMware, 
Window - win_copy, win_file, win_path, win_ping
more more

https://docs.ansible.com/
---------------------------------
Commands
---------------------------------
task:
  - name: "describle"
  command: cat resolv.conf chdir=/etc
  
  
  
Dynamic Inventory Plugin will be used to fetch real-time information about your AWS ec2 instances.
ansible-inventory --list -i aws_inventory.py
We can use following command to list all hosts in our AWS inventory using this script.

cisco.ios collection is specifically designed for managing Cisco IOS devices.

---
- name: 'hosts'
  hosts: all
  become: yes
  tasks:
    - name: 'Execute a script'
      script: '/tmp/install_script.sh'
	  
---
- name: 'hosts'
  hosts: all
  become: yes
  tasks:
    - name: 'Execute a script'
      script: '/tmp/install_script.sh'
    - name: 'Start httpd service'
      service:
        name: 'httpd'
        state: 'started'
		
---------------------------
Variable insite a playbook

#define
var:
  dns_server: 192.168.1.100
 



'{{ dns_server }}'





variable.yml
http_port: 8081
ssh_port: 22






'{{ http_port }}'

[bob@student-node playbooks]$ cat inventory 
localhost ansible_connection=local nameserver_ip=8.8.8.8 snmp_port=160-161
node01 ansible_host=node01 ansible_ssh_pass=caleston123
node02 ansible_host=node02 ansible_ssh_pass=caleston123
[web_nodes]
node01
node02

[all:vars]
app_list=['vim', 'sqlite', 'jq']
user_details={'username': 'admin', 'password': 'secret_pass', 'email': 'admin@example.com'}

- name: 'Add nameserver in resolv.conf file on localhost'
  hosts: localhost
  become: yes
  tasks:
    - name: 'Add nameserver in resolv.conf file'
      lineinfile:
        path: /tmp/resolv.conf
        line: 'nameserver {{  nameserver_ip  }}'
		
We have updated the /home/bob/playbooks/playbook.yaml playbook to add a new task to disable SNMP port on localhost. However, the port is hardcoded in the playbook. Update the playbook to replace the hardcoded value of the SNMP port to use the value from the variable named snmp_port, defined in the inventory file.

[bob@student-node playbooks]$ cat playbook.yaml 
---
- name: 'Add nameserver in resolv.conf file on localhost'
  hosts: localhost
  become: yes
  tasks:
    - name: 'Add nameserver in resolv.conf file'
      lineinfile:
        path: /tmp/resolv.conf
        line: 'nameserver {{  nameserver_ip  }}'
    - name: 'Disable SNMP Port'
      firewalld:
        port: '160-161'
        permanent: true
        state: disabled 
[bob@student-node playbooks]$ cat inventory 
localhost ansible_connection=local nameserver_ip=8.8.8.8 snmp_port=160-161
node01 ansible_host=node01 ansible_ssh_pass=caleston123
node02 ansible_host=node02 ansible_ssh_pass=caleston123
[web_nodes]
node01
node02

[all:vars]
app_list=['vim', 'sqlite', 'jq']
user_details={'username': 'admin', 'password': 'secret_pass', 'email': 'admin@example.com'}
[bob@student-node playbooks]$ vim playbook.yaml 

---------------------------
---
- hosts: all
  become: yes
  tasks:
    - name: Install applications
      yum:
        name: "{{ item }}"
        state: present
      with_items:
        - "{{ app_list }}"





---
- hosts: all
  become: yes
  tasks:
    - name: Set up user
      user:
        name: "{{ user_details.username }}"
        password: "{{ user_details.password }}"
        comment: "{{ user_details.email }}"
        state: present
		
condition
when <condition> if condition is true, that task is run
tasks:
  when : ansible_os_family == Debian 
-> property of tasks



var: 
  packages:
    - name: ngix
      require: True
    - name: mysql
      require: True
    - name: apache
      require: False
	  
tasks:
  - name: Install "{{ item.name }}"
    apt:
	  name: "{{ item.name }}"
	  state: present
	when: item.required == True
	loop: "{{ packages }}"
	
	|
	v
	
tasks:
  - name: Install ngix
    apt:
	  name: ngix
	  state: present
  - name: Install ngix
    apt:
	  name: ngix
	  state: present
		
--------------
Conditional and Register

name: Check service status
host: localhost
tasks:
  - command: service httpd status
    -----------------
	register: result
	---------------------------
  
  - mail:
    to: admin@d0001.local
	subject: Service Alert
	body: http Service id down
	when: result.stdout.find('down') != -1
	
	
Use the when condition to run this task only on node02 host
---
-  name: 'Execute a script on all web server nodes'
   hosts: all
   become: yes
   tasks:
     -  service: 'name=nginx state=started'
        when: 'ansible_host=="node02"'
	

---
- name: 'Am I an Adult or a Child?'
  hosts: localhost
  vars:
    age: 25
  tasks:
    - name: I am a Child
      command: 'echo "I am a Child"'
      when: 'age < 18'
    - name: I am an Adult
      command: 'echo "I am an Adult"'
      when: 'age >= 18'

-------------------------------------------
Loop
-------------------------------------------
tasks
 - user: name "{{ item }}" state=present
   loop: 
     -joe
	 -jun
	 -ice
	 -ny
	 
tasks
 - user: name='{{ item.name }}' state=present uid='{{ item.uid }}'
   loop: 
     - name: joe
	   uid: 1010
	 - name: jun
	   uid: 1020
	 - name: ice
	   uid: 1030
	 - name: ny
	   uid: 1040
	
tasks
 - user: name='{{ item.name }}' state=present uid='{{ item.uid }}'
   loop: 
     - { name: joe, uid: 1010 }
	 - { name: jun, uid: 1020 }
	 - { name: ice, uid: 1030 }
	 - { name: ny, uid: 1040 }
	 
tasks
 - user: name='{{ item.name }}' state=present uid='{{ item.uid }}'
   with_items: 
     - name: joe
	   uid: 1010
	 - name: jun
	   uid: 1020
	 - name: ice
	   uid: 1030
	 - name: ny
	   uid: 1040
	 
	
    
 ---
-  name: 'Print list of fruits'
   hosts: localhost
   vars:
     fruits:
       - Apple
       - Banana
       - Grapes
       - Orange
   tasks:
     - command: 'echo "{{ item }}"'
       with_items: '{{ fruits }}'
	   
---
- name: 'Install required packages'
  hosts: localhost
  become: yes
  vars:
    packages:
      - httpd
      - make
      - vim
  tasks:
    - yum:
        name: '{{ item }}'
        state: present
      with_items: '{{ packages }}'
	  






