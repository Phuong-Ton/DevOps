Imperative Commands!

kubectl create <Command>

<Command List>
  clusterrole           Create a cluster role
  clusterrolebinding    Create a cluster role binding for a particular cluster role
  configmap             Create a config map from a local file, directory or literal value
  cronjob               Create a cron job with the specified name
  deployment            Create a deployment with the specified name ★★★
  ingress               Create an ingress with the specified name
  job                   Create a job with the specified name
  namespace             Create a namespace with the specified name  ★★★
  role                  Create a role with single rule
  rolebinding           Create a role binding for a particular role or cluster role
  secret                Create a secret using a specified subcommand
  service               Create a service using a specified subcommand ★★★
  serviceaccount        Create a service account with the specified name
  token                 Request a service account token
  poddisruptionbudget   Create a pod disruption budget with the specified name
  priorityclass         Create a priority class with the specified name
  quota                 Create a quota with the specified name

  
■ kubectl create deployment NAME --image=image -- [COMMAND] [args...] [options]

# Create a deployment named my-dep that runs the busybox image
kubectl create deployment my-dep --image=busybox

# Create a deployment with a command
kubectl create deployment my-dep --image=busybox -- date

# Create a deployment named my-dep that runs the nginx image with 3 replicas
kubectl create deployment my-dep --image=nginx --replicas=3

# Create a deployment named my-dep that runs the busybox image and expose port 5701
kubectl create deployment my-dep --image=busybox --port=5701

# Create a deployment named my-dep that runs multiple containers
kubectl create deployment my-dep --image=busybox:latest --image=ubuntu:latest --image=nginx
--------------------------------------------------------------------------------------------------------------------------
controlplane ~ ➜  kubectl create deployment voting-app-deploy --image=kodekloud/examplevotingapp_vote:v1 --replicas=1 --dry-run=client -o yaml > voting-app-deploy.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: voting-app-deploy
  name: voting-app-deploy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: voting-app-deploy
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: voting-app-deploy
    spec:
      containers:
      - image: kodekloud/examplevotingapp_vote:v1
        name: examplevotingapp-vote-gfs8f
        resources: {}
status: {}

Aliases: namespace, ns
■ kubectl create namespace NAME [--dry-run=server|client|none] [options]
# Create a new namespace named my-namespace
kubectl create namespace my-namespace

apiVersion: v1
kind: Namespace
metadata:
  creationTimestamp: null     ✖
  name: new-namespace
spec: {}                      ✖
status: {}                    ✖


Aliases: service, svc

■ kubectl create service <command>

Available Commands:
  clusterip      Create a ClusterIP service
  externalname   Create an ExternalName service
  loadbalancer   Create a LoadBalancer service
  nodeport       Create a NodePort service

■ kubectl create service clusterip NAME [--tcp=<port>:<targetPort>] [--dry-run=server|client|none]
kubectl create service clusterip redis-service --tcp=6379:6379 --dry-run=client -o yaml > redis-service.yaml
 
■ kubectl create service nodeport NAME [--tcp=port:targetPort] [--dry-run=server|client|none] [options]
kubectl create service nodeport voting-app-service --tcp=80:80 --node-port=30004 --dry-run=client -o yaml > voting-app-service.yaml


controlplane ~ ➜  kubectl create service nodeport my-np --tcp=5678:8080 --node-port=30004 --dry-run=client -o yaml > my-np.yaml
controlplane ~ ➜  cat my-np.yaml 
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null✖
  labels:
    app: my-np
  name: my-np
spec:
  ports:
  - name: 5678-8080 ✖
    nodePort: 30004
    port: 5678
    protocol: TCP
    targetPort: 8080
  selector:
    app: my-np 
  type: NodePort
status:                ✖
  loadBalancer: {}     ✖

