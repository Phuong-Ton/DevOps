Connect application  frontend, backend, and database
-> Service is the bridge to connect pod and node
3 type of service 
- NodePort (target port, port, and nodeport)
- ClusterIP
- Loadbalancer

Create service in YAML file and using labeling to connect with pods


apiService: v1
kind: Service
metadata:
  name: myapp-service

spec:
   type: NodePort
   ports: 
    - targetPort: 80
	  port:80
	  nodePort: 30008 (30000-32767)
   selector:
      app: my-app     -> FROM labels: of pods 
	  type: frontend  ->

■ kubectl create -f <YAML file>
■ kubectl get services

http://IP node:nodePort

Service automatic loadbalance (buit-in: random Agrigothym), span all Node -> Automatic -> Can use any node IP to access app
--> highly flexible 




Deploy Microservice Architecture

 Voting-App(python web:80)              Result-App(node.js:80) 
            |                                  ^
			|                                  |
			V (Write)	    				   | (Read)
     In-memory DB (redis:6379)         Database (PostgreSQL:5432)
		    |                                  ^
			|                                  |
			|-------------->Worker-------------|
			      (Read)    (.NET)     Write

Voting-App:(app.py)
g.redis = Redis(host="redis-in-memory-db",db=0, socket_timeout=5)

Worker:(program.cs)
var redis = OpenRedisConnection("redis-in-memory-db");
var pgsql=OpenDBConnection("Server=postgresSQL-db;Username=postgres;Password=postgres;)"


Result-App:(server.js)
var pool = new pg.Pool({
connectionString : 'postgres://postgres@postgreSQL-db/postgres'
});


--> package 5 app to 5 repos
Using docker:

■ docker run -d --name=redis redis
■ docker run -d --name=db postgres:9.4
■ docker run -d --name=voting-app -p 5000:80 --link redis:redis-in-memory-db 
■ docker run -d --name=result-app -p 5001:80 --link db:postgreSQL-db
■ docker run -d --name=worker --links db:postgreSQL-db --link redis:redis-in-memory-db

Using kubernetes:
1. Deply 5 PODs: 5 pods carry 5 app pull data from respo
2. How to enable connectivity between the services.
 - User access voting-app and result-app
 - voting-app save data to redis and worker read data from redis
 - worker save data to db and result-app read data from db
 
-> redis and postgres is internal service : No people -> ClusterIP Service
   + redis is used by Voting-App and Worker
   + postgreSQL is used by Worker and Result-App
-> voting-app and result-app is external service: User access -> NodePort Service

image:
kodekloud/examplevotingapp_vote:v1
kodekloud/examplevotingapp_result:v1
redis
postgresql
kodekloud/examplevotingapp_worker:v1


Step 1: Create PODS

pod-voting-app.yaml
-------------------------------------------------
apiVersion: v1
kind: Pod 
metadata:
  name: voting-app-pod
  labels:
    name: voting-app-pod
    app: demo-voting-app
spec:
  containers:
    - name: voting-app
      image: kodekloud/examplevotingapp_vote:v1
      ports:
      - containerPort: 80
-------------------------------------------------

pod-result-app.yaml
-------------------------------------------------
apiVersion: v1
kind: Pod 
metadata:
  name: result-app-pod
  labels:
    name: result-app-pod
    app: demo-voting-app
spec:
  containers:
    - name: result-app
      image: kodekloud/examplevotingapp_result:v1
      ports:
        - containerPort: 80
-------------------------------------------------

pod-redis.yaml
-------------------------------------------------
apiVersion: v1
kind: Pod 
metadata:
  name: redis-pod
  labels:
    name: redis-pod
    app: demo-voting-app
spec:
  containers:
    - name: redis    -> Attention !!!!
	  image: redis
	  ports:
	    - containerPort:6379
-------------------------------------------------

pod-db.yaml
-------------------------------------------------
apiVersion: v1
kind: Pod 
metadata:
  name: db-pod
  labels:
    name: db-pod
    app: demo-voting-app
spec:
  containers:
    - name: db 
      image: postgresql
      ports:
        - containerPort: 5432
      env:
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "postgres"
-------------------------------------------------

pod-worker.yaml
-------------------------------------------------
apiVersion: v1
kind: Pod 
metadata:
  name: worker-pod
  labels:
	name: worker-pod
    app: demo-voting-app
spec:
  containers:
    - name: worker
	  image: kodekloud/examplevotingapp_worker:v1
-------------------------------------------------

Step 2: Create Service
service-voting.yaml
-------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: voting-service
  labels:
    name: voting-service
    app: demo-voting-app
spec:
  type: NodePort
  ports: 
    - targetPort: 80
      port: 80
      nodePort: 30004
  selector:
     name: voting-app-pod
     app: demo-voting-app
-------------------------------------------------
minikube service voting-service --url

service-service.yaml
-------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: result-service
  labels:
    name: result-service
    app: demo-voting-app
spec:
  type: NodePort
  ports:
    - targetPort: 80
      port: 80
      nodePort: 30005
  selector:
     name: result-app-pod
     app: demo-voting-app
-------------------------------------------------

service-redis.yaml
-------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: redis
  labels:
    name: redis-service
    app: demo-voting-app
spec:
  type: ClusterIP
  ports: 
  - targetPort: 6379
    port: 6379
  selector:
     name: redis-pod
     app: demo-voting-app
-------------------------------------------------

service-postgres.yaml
-------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: db
  labels:
    name: posgres-service
    app: demo-voting-app
spec:
  type: ClusterIP
   ports: 
    - targetPort: 5432
	  port: 5432
   selector:
     name: postgres-pod
     app: demo-voting-app
-------------------------------------------------

