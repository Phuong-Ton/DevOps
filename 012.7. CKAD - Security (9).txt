
Module 9: Security - 29 Lessons
9.1 Authentication, Authorization and Admission Control 03:18
9.2 Authentication 05:34
9.3 Article on Setting up Basic Authentication
9.4 Important Updates
etup basic authentication on Kubernetes (Deprecated in 1.19)
Note: This is not recommended in a production environment. This is only for learning purposes. Also, note that this approach is deprecated in Kubernetes version 1.19 and is no longer available in later releases.

Follow the below instructions to configure basic authentication in a kubeadm setup. Create a file with user details locally at /tmp/users/user-details.csv

> # User File Contents
> password123,user1,u0001
> password123,user2,u0002
> password123,user3,u0003
> password123,user4,u0004
> password123,user5,u0005
> ```
Edit the kube-apiserver static pod configured by kubeadm to pass in the user details. The file is located at /etc/kubernetes/manifests/kube-apiserver.yaml

> apiVersion: v1
> kind: Pod
> metadata:
>   name: kube-apiserver
>   namespace: kube-system
> spec:
>   containers:
>   - command:
>     - kube-apiserver
>       
>     image: k8s.gcr.io/kube-apiserver-amd64:v1.11.3
>     name: kube-apiserver
>     volumeMounts:
>     - mountPath: /tmp/users
>       name: usr-details
>       readOnly: true
>   volumes:
>   - hostPath:
>       path: /tmp/users
>       type: DirectoryOrCreate
>     name: usr-details
> 
Modify the kube-apiserver startup options to include the basic-auth file >

> apiVersion: v1
> kind: Pod
> metadata:
>   creationTimestamp: null
>   name: kube-apiserver
>   namespace: kube-system
> spec:
>   containers:
>   - command:
>     - kube-apiserver
>     - --authorization-mode=Node,RBAC
>       
>     - --basic-auth-file=/tmp/users/user-details.csv
> 
Create the necessary roles and role bindings for these users:

---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: default
  name: pod-reader
rules:
- apiGroups: # "" indicates the core API group
  resources: ["pods
  verbs: ["get", "watch", "lis

---
# This role binding allows "jane" to read pods in the "default" namespace.
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: read-pods
  namespace: default
subjects:
- kind: User
  name: user1 # Name is case sensitive
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role #this must be Role or ClusterRole
  name: pod-reader # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io
Once created, you may authenticate into the kube-api server using the users credentials

curl -v -k https://localhost:6443/api/v1/pods -u "user1:password123"
Before moving to the “KubeConfig” lecture I would like to share some updates: - How to generate certificates for different Kubernetes components and for a user and use them in the Kubernetes cluster is not in the scope of the official CKAD exam. These are part of the official CKA exam.

9.5 KubeConfig 08:32

9.6 Practice Test KubeConfig
9.7 Solution KubeConfig 08:08
01.Where is the default kubeconfig file located in the current environment?
Find the current home directory by looking at the HOME environment variable.

Use the command ls -a and look for the kube config file under /root/.kube.

> /root/.kube/config

02.How many clusters are defined in the default kubeconfig file?
controlplane ~ ✖ kubectl config view
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: DATA+OMITTED
    server: https://controlplane:6443
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: kubernetes-admin
  name: kubernetes-admin@kubernetes
current-context: kubernetes-admin@kubernetes
kind: Config
preferences: {}
users:
- name: kubernetes-admin
  user:
    client-certificate-data: DATA+OMITTED
    client-key-data: DATA+OMITTED

03. How many Users are defined in the default kubeconfig file? 1
04. How many contexts are defined in the default kubeconfig file? 1
05. What is the user configured in the current context? kubernetes-admin@kubernetes
06. What is the name of the cluster configured in the default kubeconfig file? kubernetes
07. A new kubeconfig file named my-kube-config is created. It is placed in the /root directory. How many clusters are defined in that kubeconfig file? 4
controlplane ~ ➜  kubectl config view --kubeconfig my-kube-config
apiVersion: v1
clusters:
- cluster:
    certificate-authority: /etc/kubernetes/pki/ca.crt
    server: https://controlplane:6443
  name: development
- cluster:
    certificate-authority: /etc/kubernetes/pki/ca.crt
    server: https://controlplane:6443
  name: kubernetes-on-aws
- cluster:
    certificate-authority: /etc/kubernetes/pki/ca.crt
    server: https://controlplane:6443
  name: production
- cluster:
    certificate-authority: /etc/kubernetes/pki/ca.crt
    server: https://controlplane:6443
  name: test-cluster-1
contexts:
- context:
    cluster: kubernetes-on-aws
    user: aws-user
  name: aws-user@kubernetes-on-aws
- context:
    cluster: test-cluster-1
    user: dev-user
  name: research
- context:
    cluster: development
    user: test-user
  name: test-user@development
- context:
    cluster: production
    user: test-user
  name: test-user@production
current-context: test-user@development
kind: Config
preferences: {}
users:
- name: aws-user
  user:
    client-certificate: /etc/kubernetes/pki/users/aws-user/aws-user.crt
    client-key: /etc/kubernetes/pki/users/aws-user/aws-user.key
- name: dev-user
  user:
    client-certificate: /etc/kubernetes/pki/users/dev-user/developer-user.crt
    client-key: /etc/kubernetes/pki/users/dev-user/dev-user.key
- name: test-user
  user:
    client-certificate: /etc/kubernetes/pki/users/test-user/test-user.crt
    client-key: /etc/kubernetes/pki/users/test-user/test-user.key


08. How many contexts are configured in the my-kube-config file? 4
09. What user is configured in the research context?      user: dev-user
10. What is the name of the client-certificate file configured for the aws-user? aws-user.crt
11. What is the current context set to in the my-kube-config file? test-user@development
12. I would like to use the dev-user to access test-cluster-1. Set the current context to the right one so I can do that.
Once the right context is identified, use the kubectl config use-context command.

dev-user@test-cluster-1
To use that context, run the command: kubectl config --kubeconfig=/root/my-kube-config use-context research
To know the current context, run the command: kubectl config --kubeconfig=/root/my-kube-config current-context

 kubectl config --kubeconfig=/root/my-kube-config use-context research
controlplane ~ ✖  kubectl config --kubeconfig=/root/my-kube-config use-context research
Switched to context "research".
13. We don't want to have to specify the kubeconfig file option on each command.
Set the my-kube-config file as the default kubeconfig by overwriting the content of ~/.kube/config with the content of the my-kube-config file.

Replace the contents in the default kubeconfig file with the content from my-kube-config file with following command.

cp my-kube-config ~/.kube/config
controlplane ~ ✖ cp my-kube-config ~/.kube/config

14. With the current-context set to research, we are trying to access the cluster. However something seems to be wrong. Identify and fix the issue.
Try running the kubectl get pods command and look for the error. All users certificates are stored at /etc/kubernetes/pki/users.

- cluster:
    certificate-authority: /etc/kubernetes/pki/ca.crt
    server: https://controlplane:6443
  name: test-cluster-1
  
- name: dev-user
  user:
    client-certificate: /etc/kubernetes/pki/users/dev-user/developer-user.crt
    client-key: /etc/kubernetes/pki/users/dev-user/dev-user.key
	
/etc/kubernetes/pki/users/dev-user/developer-user.crt


9.8 API Groups 05:52
9.9 Authorization 07:30
9.10 Role Based Access Controls 04:28
9.11 Practice Test Role Based Access Controls
9.12 Solution Role Based Access Controls 13:36

9.13 Cluster Roles 04:33
9.14 Practice Test Cluster Roles
9.15 Solution Cluster Roles 11:13
9.16 Admission Controllers 08:07
9.17 Practice Test – Admission Controllers
9.18 Solution: Admission Controllers 06:41
9.19 Validating and Mutating Admission Controllers 10:26
9.20 Practice Test – Validating and Mutating Admission Controllers
9.21 Solution: Validating and Mutating Admission Controllers 07:39
9.22 API Versions 08:47
9.23 API Deprecations 13:45
9.24 Practice Test – API Versions/Deprecations
9.25 Solution: API Versions/Deprecations 07:18
9.26 Custom Resource Definition 11:01
9.27 Practice Test - Custom Resource Definition
9.28 Custom Controllers 03:57
9.29 Operator Framework 03:00


✫
★

✪
✰
✅
■ 
✔
🟊▲▲▶▶◀⬛⬜ 
