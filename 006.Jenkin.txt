Correct me if I am wrong. I do not like Jenkins sections very much. It is boring than Dev Tool Preview Video. I really interested in Jenkins, but.....I disappointed. Jenkin instructor some time laugh when conveying the content. For me, I do not like this.

I also can not access LABs (maybe it is free). However, I like another sections


git clone https://github.com/kodekloudhub/go-webapp-sample.git

deploy the sample app from the repository
cd /home/bob/go-webapp-sample/
go run main.go

Book Management
There are the following services in the book management.
----------------------------------------------------------------------------------------------------------------------------
Service Name	HTTP Method	URL	Parameter	Summary
Get Service	GET	/api/books/[BOOK_ID]	Book ID	Get a book data.
List/Search Service	GET	/api/books?query=[KEYWORD]&page=[PAGE_NUMBER]&size=[PAGE_SIZE]	Page, Keyword(Optional)	Get a list of books.
Regist Service	POST	/api/books	Book	Regist a book data.
Edit Service	PUT	/api/books	Book	Edit a book data.
Delete Service	DELETE	/api/books	Book	Delete a book data.

https://8090-port-7e23bbfd8a7b4bb7.labs.kodekloud.com//api/books	
Account Management
There are the following services in the Account management.
----------------------------------------------------------------------------------------------------------------------------
Service Name	HTTP Method	URL	Parameter	Summary
Login Service	POST	/api/auth/login	Session ID, User Name, Password	Session authentication with username and password.
Logout Service	POST	/api/auth/logout	Session ID	Logout a user.
Login Status Check Service	GET	/api/auth/loginStatus	Session ID	Check if the user is logged in.
Login Username Service	GET	/api/auth/loginAccount	Session ID	Get the login user's username.

https://8090-port-7e23bbfd8a7b4bb7.labs.kodekloud.com/api/auth/login
https://8090-port-7e23bbfd8a7b4bb7.labs.kodekloud.com/api/auth/logout
https://8090-port-7e23bbfd8a7b4bb7.labs.kodekloud.com/loginStatus
https://8090-port-7e23bbfd8a7b4bb7.labs.kodekloud.com/api/auth/loginAccount

Master Management
There are the following services in the Master management.
----------------------------------------------------------------------------------------------------------------------------
Service Name	HTTP Method	URL	Parameter	Summary
Category List Service	GET	/api/categories	Nothing	Get a list of categories.
Format List Service	GET	/api/formats	Nothing	Get a list of formats.

https://8090-port-7e23bbfd8a7b4bb7.labs.kodekloud.com/api/categories
https://8090-port-7e23bbfd8a7b4bb7.labs.kodekloud.com/api/formats



CI: continuous interation: like wrap your gift, give a gift to CD, GIT > BUILD (Package) > TEST(Unit test, interation test) > Security check > Product (packaged + tested)
CD: continuous deployment: deploy the code to system (Cloud, Virual machine, On-Premise) 100% automatic
CD: continuous delivery: click button at Jenkins


https://8090-port-7e23bbfd8a7b4bb7.labs.kodekloud.com
FULL CI/CD suite
Open source
Plugin
Enter Prise for support 
https://www.jenkins.io/


Install Jenkins: command + port open
Need Java

AWS, Azure, VM, laptop
Ubuntu Server 20.04
sudo apt update -your
Automation Server

sudo yum install epel-release -y


sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo --no-check-certificate
sudo rpm --import http://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key


sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat/jenkins.io-2023.key
sudo yum upgrade




sudo yum install jenkins -y

Edit /lib/systemd/system/jenkins.service file and change Jenkins port to 8090 by updating Environment="JENKINS_PORT=" variable value.
sudo vi /lib/systemd/system/jenkins.service

It should look like this:
Environment="JENKINS_PORT=8090"

Once done start Jenkins service.
sudo systemctl start jenkins




INSTALL JENKINS With Java 17 in EC2 Instance Linux (2023-RedHat)
+ Ref: 
https://docs.aws.amazon.com/corretto/latest/corretto-17-ug/amazon-linux-install.html
https://pkg.jenkins.io/redhat/
https://www.jenkins.io/doc/book/installing/linux/


sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat/jenkins.io-2023.key
sudo yum upgrade
sudo yum install fontconfig java-17-amazon-corretto-devel -y
java -version
sudo yum install jenkins -y
#Jenkins 2.475
sudo vi /lib/systemd/system/jenkins.service
sudo systemctl daemon-reload
sudo systemctl enable jenkins
sudo systemctl start jenkins
sudo systemctl status jenkins

18.236.164.6 : EC2 instance with Linux IMA open port 22,80,443,8090
ssh -i "devops_key_pair.pem" ec2-user@18.236.164.6
-> this ip change when stop


http://18.236.164.6:8090
sudo cat /var/lib/jenkins/secrets/initialAdminPassword
Choose Install suggested plugins 
Username/Pwd:PhuongTTT/Kl
Change PhuongTTT > Account > TimeZone: America/Vancouver


Dashboard > Manage Jenkins > Toole and Action > Jenkins CLI
https://www.jenkins.io/doc/book/managing/cli/

Download jenkins CLI 
sudo wget http://localhost:8090/jnlpJars/jenkins-cli.jar

Install Plugin: "Publish Over SSH Version1.25"
Dashboard > Phuong Ton > Security > SSH Public Keys is appeared




curl -Lv http://localhost:8090/login 2>&1 | grep -i 'x-ssh-endpoint'
Dashboard ---> Manage Jenkins --> Security --> SSH Server
java -jar jenkins-cli.jar -s http://18.236.164.6:8090 -auth phuongttt:1190c03fc81142961f4768089d8c919c32 who-am-i
mike@jenkins-server:~$ ssh -i /home/mike/.ssh/jenkins_key -l mike -p 8022 jenkins-server help
mike@jenkins-server:~$ ssh -i /home/mike/.ssh/jenkins_key -l mike -p 8022 jenkins-server  safe-restart

"C:\Program Files\Java\jdk-17\bin\java.exe" -jar jenkins-cli.jar -s http://18.236.164.6:8090 -auth phuongttt:1190c03fc81142961f4768089d8c919c32 who-am-i
SET JAVAHOME = C:\Program Files\Java\jdk-11.0.1




 java -jar jenkins-cli.jar -s http://18.236.164.6:8090 -auth phuongttt:1190c03fc81142961f4768089d8c919c32 who-am-i
 java -jar jenkins-cli.jar -s http://18.236.164.6:8090 -auth phuongttt:1190c03fc81142961f4768089d8c919c32 -webSocket list-jobs
 java -jar jenkins-cli.jar -s http://18.236.164.6:8090 -auth phuongttt:1190c03fc81142961f4768089d8c919c32 -webSocket build test
 
 
sudo mount -o remount,size=2G /tmp/
 
 A lot of plugins -> Plugin Index

/usr/share/java/jenkins.war
JAVAHOME: usr/lib/jvm/java-17-amazon-corretto.x86_64
OS:  /usr/lib/jvm/java-17-amazon-corretto.x86_64

Administrator: backup, restore, monitoring, and scale up

Backup target:
$JENKINS_HOME --- Configuration Files (config.xml) + Jobs
ll /var/lib/jenkins/

install Plugin thinBackup
Create Directory for saving backup file Dashboard > Manage Jenkins > System

thinBackup will be appeared at Dashboard > Manage Jenkins > Tool and Action
------------------------
Jenkins File
is a text file that define template, instruction

pipeline{
}
This is the task you want to accomplish
build agent is the first node: the place you build your pineline
pipeline{
	agent any
}

Next is stage, for example Build, Test, Deploy Stage, can naming it to organize
Insite stage is steps, steps are the work that is being done in the pineline
pipeline{
	agent any
	stages{
		stage('Build'){
			steps{
				echo "Buiding something"
			}
		}
		stage('Test'){
			steps{
				echo "Testing code"
			}
		}
	}
}
---> Support muti-stage
Buid CI pineline
Plugins : Go Plugin

Plugins
Docker API Plugin
Docker commons Plugin
Docker Pineline 
Docker Plugin



pipeline {
    agent {
        label {
            label 'master'
            customWorkspace "${JENKINS_HOME}/${BUILD_NUMBER}/"
        }
    }
    environment {
        Go111MODULE='on'
    }
    stages {
        stage('Test') {
            steps {
                git 'https://github.com/kodekloudhub/go-webapp-sample.git'
                sh 'go test ./...'
            }
        }
    }
}

in /var/lib/jenkins/workspace/go-test

 
 Running in /var/lib/jenkins/1
 
 
 The recommended git tool is: NONE
No credentials specified
Cloning the remote Git repository
Cloning repository https://github.com/kodekloudhub/go-webapp-sample.git
 > git init /var/lib/jenkins/1 # timeout=10
Fetching upstream changes from https://github.com/kodekloudhub/go-webapp-sample.git
 > git --version # timeout=10
 > git --version # 'git version 2.25.1'
 > git fetch --tags --force --progress -- https://github.com/kodekloudhub/go-webapp-sample.git +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git config remote.origin.url https://github.com/kodekloudhub/go-webapp-sample.git # timeout=10
 > git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
Avoid second fetch
 > git rev-parse refs/remotes/origin/master^{commit} # timeout=10
Checking out Revision 09b60722df9bb27580dafc7ec249fe2e805cbfbb (refs/remotes/origin/master)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f 09b60722df9bb27580dafc7ec249fe2e805cbfbb # timeout=10
 > git branch -a -v --no-abbrev # timeout=10
 > git checkout -b master 09b60722df9bb27580dafc7ec249fe2e805cbfbb # timeout=10
Commit message: "build"
First time build. Skipping changelog.
[Pipeline] sh
+ go test ./...

Started by user admin
[Pipeline] Start of Pipeline
[Pipeline] node
Running on Jenkins in /var/lib/jenkins/workspace/go-test
[Pipeline] {
[Pipeline] ws
Running in /var/lib/jenkins/1
[Pipeline] {
[Pipeline] withEnv
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Test)
[Pipeline] git
The recommended git tool is: NONE
No credentials specified
Cloning the remote Git repository
Cloning repository https://github.com/kodekloudhub/go-webapp-sample.git
 > git init /var/lib/jenkins/1 # timeout=10
Fetching upstream changes from https://github.com/kodekloudhub/go-webapp-sample.git
 > git --version # timeout=10
 > git --version # 'git version 2.25.1'
 > git fetch --tags --force --progress -- https://github.com/kodekloudhub/go-webapp-sample.git +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git config remote.origin.url https://github.com/kodekloudhub/go-webapp-sample.git # timeout=10
 > git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
Avoid second fetch
 > git rev-parse refs/remotes/origin/master^{commit} # timeout=10
Checking out Revision 09b60722df9bb27580dafc7ec249fe2e805cbfbb (refs/remotes/origin/master)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f 09b60722df9bb27580dafc7ec249fe2e805cbfbb # timeout=10
 > git branch -a -v --no-abbrev # timeout=10
 > git checkout -b master 09b60722df9bb27580dafc7ec249fe2e805cbfbb # timeout=10
Commit message: "build"
First time build. Skipping changelog.
[Pipeline] sh
+ go test ./...
go: downloading gopkg.in/yaml.v2 v2.4.0
go: downloading github.com/stretchr/testify v1.7.0
go: downloading gorm.io/gorm v1.22.5
go: downloading gopkg.in/natefinch/lumberjack.v2 v2.0.0
go: downloading github.com/jinzhu/configor v1.2.1
go: downloading github.com/labstack/echo/v4 v4.6.3
go: downloading github.com/swaggo/echo-swagger v1.1.4
go: downloading gorm.io/driver/postgres v1.2.3
go: downloading github.com/alecthomas/template v0.0.0-20190718012654-fb15b899a751
go: downloading gorm.io/driver/mysql v1.2.3
go: downloading gorm.io/driver/sqlite v1.2.6
go: downloading github.com/labstack/echo-contrib v0.11.0
go: downloading github.com/gorilla/sessions v1.2.1
go: downloading gopkg.in/boj/redistore.v1 v1.0.0-20160128113310-fc113767cd6b
go: downloading gopkg.in/go-playground/validator.v9 v9.31.0
go: downloading github.com/swaggo/swag v1.7.8
go: downloading go.uber.org/zap v1.20.0
go: downloading golang.org/x/crypto v0.0.0-20220112180741-5e0467b6c7ce
go: downloading github.com/valyala/fasttemplate v1.2.1
go: downloading github.com/valyala/bytebufferpool v1.0.0
go: downloading github.com/BurntSushi/toml v1.0.0
go: downloading github.com/gorilla/securecookie v1.1.1
go: downloading gopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b
go: downloading github.com/pmezard/go-difflib v1.0.0
go: downloading github.com/davecgh/go-spew v1.1.1
go: downloading github.com/jackc/pgx/v4 v4.14.1
go: downloading github.com/garyburd/redigo v1.6.3
go: downloading github.com/go-sql-driver/mysql v1.6.0
go: downloading github.com/mattn/go-sqlite3 v2.0.3+incompatible
go: downloading github.com/gorilla/context v1.1.1
go: downloading github.com/swaggo/files v0.0.0-20210815190702-a29dd2bc99b2
go: downloading github.com/leodido/go-urn v1.2.1
go: downloading github.com/go-playground/universal-translator v0.18.0
go: downloading github.com/jinzhu/inflection v1.0.0
go: downloading github.com/jinzhu/now v1.1.4
go: downloading github.com/jackc/pgtype v1.9.1
go: downloading github.com/jackc/pgconn v1.10.1
go: downloading github.com/jackc/pgio v1.0.0
go: downloading github.com/jackc/pgproto3/v2 v2.2.0
go: downloading go.uber.org/multierr v1.7.0
go: downloading go.uber.org/atomic v1.9.0
go: downloading github.com/go-playground/locales v0.14.0
go: downloading golang.org/x/net v0.0.0-20220114011407-0dd24b26b47d
go: downloading github.com/labstack/gommon v0.3.1
go: downloading golang.org/x/text v0.3.7
go: downloading github.com/jackc/pgservicefile v0.0.0-20200714003250-2b9c44734f2b
go: downloading github.com/jackc/pgpassfile v1.0.0
go: downloading github.com/jackc/chunkreader/v2 v2.0.1
go: downloading golang.org/x/time v0.0.0-20211116232009-f0f3c7e86c11
go: downloading github.com/golang-jwt/jwt v3.2.2+incompatible
go: downloading golang.org/x/tools v0.1.8
go: downloading github.com/KyleBanks/depth v1.2.1
go: downloading github.com/go-openapi/spec v0.20.4
go: downloading github.com/mattn/go-isatty v0.0.14
go: downloading github.com/mattn/go-colorable v0.1.12
go: downloading golang.org/x/sys v0.0.0-20220114195835-da31bd327af9
go: downloading github.com/go-openapi/swag v0.19.15
go: downloading github.com/go-openapi/jsonreference v0.19.6
go: downloading github.com/go-openapi/jsonpointer v0.19.5
go: downloading github.com/PuerkitoBio/purell v1.1.1
go: downloading github.com/PuerkitoBio/urlesc v0.0.0-20170810143723-de5bf2ad4578
go: downloading github.com/mailru/easyjson v0.7.7
go: downloading github.com/josharian/intern v1.0.0
?   	github.com/ybkuroki/go-webapp-sample	[no test files]
?   	github.com/ybkuroki/go-webapp-sample/config	[no test files]
?   	github.com/ybkuroki/go-webapp-sample/container	[no test files]
ok  	github.com/ybkuroki/go-webapp-sample/controller	0.800s
?   	github.com/ybkuroki/go-webapp-sample/docs	[no test files]
?   	github.com/ybkuroki/go-webapp-sample/logger	[no test files]
?   	github.com/ybkuroki/go-webapp-sample/middleware	[no test files]
?   	github.com/ybkuroki/go-webapp-sample/migration	[no test files]
?   	github.com/ybkuroki/go-webapp-sample/model	[no test files]
?   	github.com/ybkuroki/go-webapp-sample/model/dto	[no test files]
?   	github.com/ybkuroki/go-webapp-sample/repository	[no test files]
?   	github.com/ybkuroki/go-webapp-sample/router	[no test files]
?   	github.com/ybkuroki/go-webapp-sample/service	[no test files]
?   	github.com/ybkuroki/go-webapp-sample/session	[no test files]
?   	github.com/ybkuroki/go-webapp-sample/test	[no test files]
?   	github.com/ybkuroki/go-webapp-sample/util	[no test files]
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // ws
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS




pipeline {
    agent {
        label {
            label 'master'
            customWorkspace "${JENKINS_HOME}/${BUILD_NUMBER}/"
        }
    }
    environment {
        Go111MODULE='on'
    }
    stages {
        stage('Test') {
            steps {
                git 'https://github.com/kodekloudhub/go-webapp-sample.git'
            }
        }
        stage('build') {
            steps {
                script{
                    image = docker.build("adminturneddevops/go-webapp-sample")
                }
            }
        }
    }
}



sh "docker run -p 8090:8000 -d adminturneddevops/go-webapp-sample"




pipeline {
    agent {
        label {
            label 'master'
            customWorkspace "${JENKINS_HOME}/${BUILD_NUMBER}/"
        }
    }
    environment {
        Go111MODULE='on'
    }
    stages {
        stage('Test') {
            steps {
                git 'https://github.com/kodekloudhub/go-webapp-sample.git'
            }
        }
        stage('build') {
            steps {
                script{
                    image = docker.build("adminturneddevops/go-webapp-sample")
                    sh "docker run -p 8090:8000 -d adminturneddevops/go-webapp-sample"
                }
            }
        }
    }
}


Install on AWS Linux 2023 -redhat

    1  systemctl status httpd
    2  yum update -y
    3  yum install -y httpd
    4  sudo yum update -y
    5  sudo yum install -y httpd
    6  sudo systemctl start httpd
    7  sudo systemctl enable httpd
    8  sudo echo "<h1>Hello World from $(hostname -f)</h1>" > /var/www/html/index.html
    9  sudo systemctl start httpd
   10  sudo systemctl enable httpd
   11  sudo echo "<h1>Hello World from $(hostname -f)</h1>" > /var/www/html/index.html
   12  vi /var/www/html/index.html
   13  sudo vi /var/www/html/index.html
   14  sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo
   15  sudo rpm --import https://pkg.jenkins.io/redhat/jenkins.io-2023.key
   16  sudo yum upgrade
   17  sudo yum install fontconfig java-17-amazon-corretto-devel -y
   18  java -version
   19  sudo yum install jenkins -y
   20  sudo vi /lib/systemd/system/jenkins.service
   21  clear
   22  sudo systemctl daemon-reload
   23  sudo systemctl enable jenkins
   24  sudo systemctl start jenkins
   25  sudo systemctl status jenkins
   26  sudo cat /var/lib/jenkins/secrets/initialAdminPassword
   27  ls
   28  pwd
   29  wget http://localhost:8090/jnlpJars/jenkins-cli.jar




